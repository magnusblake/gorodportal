// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String?       @unique
  emailVerified       DateTime?
  password            String?
  image               String?
  phone               String?
  address             String?
  role                Role          @default(USER)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  emailNotifications  Boolean       @default(false)
  appealStatusUpdates Boolean       @default(false)
  newResponses        Boolean       @default(false)
  newsUpdates         Boolean       @default(false)
  accounts            Account[]
  sessions            Session[]
  appeals             Appeal[]
  notifications       Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  appeals     Appeal[]
}

model Appeal {
  id        String           @id @default(cuid())
  title     String
  content   String
  status    AppealStatus     @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String
  category  Category         @relation(fields: [categoryId], references: [id])
  responses AppealResponse[]
}

model AppealResponse {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  appealId  String
  appeal    Appeal   @relation(fields: [appealId], references: [id], onDelete: Cascade)
}

model News {
  id        String   @id @default(cuid())
  title     String
  content   String
  image     String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VisitorCounter {
  id    String @id @default(cuid())
  count Int    @default(0)
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  content   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum AppealStatus {
  PENDING
  IN_PROGRESS
  ANSWERED
  CLOSED
  REJECTED
}

enum NotificationType {
  APPEAL_STATUS_UPDATE
  NEW_RESPONSE
  NEWS_UPDATE
}

